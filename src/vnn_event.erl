%%--------------------------------------------------------------------------------------------------
%% @doc
%% Event manager
%% @end
%%--------------------------------------------------------------------------------------------------
-module (vnn_event).

-export ([start_link/0,
          add_handler/2,
          delete_handler/2,
          notify_inbound/2,
          notify_outbound/2,
          notify_neighbour/1,
          notify_position/3,
          notify_connection/2,
          notify_spike/1,
          notify_new_network/0]).

%%--------------------------------------------------------------------------------------------------
%% @doc
%% Start event manager
%% @end
%%--------------------------------------------------------------------------------------------------
-spec start_link () -> {ok, pid ()} | {error, {already_started, pid ()}}.
%%--------------------------------------------------------------------------------------------------
start_link () ->
    gen_event:start_link ({local, ?MODULE}).


%%--------------------------------------------------------------------------------------------------
%% @doc
%% Adds new event handler
%% @end
%%--------------------------------------------------------------------------------------------------
-spec add_handler (Handler :: atom (), Args :: []) -> ok | {'EXIT', term ()} | term ().
%%--------------------------------------------------------------------------------------------------
add_handler (Handler, Args) ->
    gen_event:add_handler (?MODULE, Handler, Args).


%%--------------------------------------------------------------------------------------------------
%% @doc
%% Delete event handler
%% @end
%%--------------------------------------------------------------------------------------------------
-spec delete_handler (Handler :: atom (), Args :: []) -> term () | {error, module_not_found} | {'EXIT', term ()}.
%%--------------------------------------------------------------------------------------------------
delete_handler (Handler, Args) ->
    gen_event:delete_handler (?MODULE, Handler, Args).


%%--------------------------------------------------------------------------------------------------
%% @doc
%% Notify node is inbound
%% @end
%%--------------------------------------------------------------------------------------------------
-spec notify_inbound (non_neg_integer (), non_neg_integer ()) -> ok.
%%--------------------------------------------------------------------------------------------------
notify_inbound (IdA, IdB) ->
    gen_event:notify (?MODULE, {notify_inbound, IdA, IdB}).


%%--------------------------------------------------------------------------------------------------
%% @doc
%% Notify node is outbound
%% @end
%%--------------------------------------------------------------------------------------------------
-spec notify_outbound (non_neg_integer (), non_neg_integer ()) -> ok.
%%--------------------------------------------------------------------------------------------------
notify_outbound (IdA, IdB) ->
    gen_event:notify (?MODULE, {notify_outbound, IdA, IdB}).


%%--------------------------------------------------------------------------------------------------
%% @doc
%% Notify node is neighbour
%% @end
%%--------------------------------------------------------------------------------------------------
-spec notify_neighbour (non_neg_integer ()) -> ok.
%%--------------------------------------------------------------------------------------------------
notify_neighbour (Id) ->
    gen_event:notify (?MODULE, {notify_neighbour, Id}).


%%--------------------------------------------------------------------------------------------------
%% @doc
%% Notify node position
%% @end
%%--------------------------------------------------------------------------------------------------
-spec notify_position (non_neg_integer (), vnn_network:node_type (), vnn_network:position ()) -> ok.
%%--------------------------------------------------------------------------------------------------
notify_position (Id, Type, Position) ->
    gen_event:notify (?MODULE, {notify_position, Id, Type, Position}).


%%--------------------------------------------------------------------------------------------------
%% @doc
%% Notify nodes connection
%% @end
%%--------------------------------------------------------------------------------------------------
-spec notify_connection (FromId, ToId) -> ok when
    FromId :: non_neg_integer (),
    ToId   :: non_neg_integer ().
%%--------------------------------------------------------------------------------------------------
notify_connection (FromId, ToId) ->
    gen_event:notify (?MODULE, {notify_connection, FromId, ToId}).


%%--------------------------------------------------------------------------------------------------
%% @doc
%% Notify node spike
%% @end
%%--------------------------------------------------------------------------------------------------
-spec notify_spike (Id) -> ok when
      Id :: non_neg_integer ().
%%--------------------------------------------------------------------------------------------------
notify_spike (Id) ->
    gen_event:notify (?MODULE, {notify_spike, Id}).


%%--------------------------------------------------------------------------------------------------
%% @doc
%% Notify new network
%% @end
%%--------------------------------------------------------------------------------------------------
-spec notify_new_network () -> ok.
%%--------------------------------------------------------------------------------------------------
notify_new_network () ->
    gen_event:notify (?MODULE, notify_new_network).
